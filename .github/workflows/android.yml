name: Android Test and Analyse

on:
  workflow_call:
    inputs:
      test:
        description: 'Type of test being run'
        required: true
        type: string
      testType:
        description: 'Type of test (analyze, test, build)'
        required: false
        type: string

jobs:
  test:
    name: Build-Test-Analyze
    runs-on: ubuntu-latest

    steps:
    #Checking out to develop branch
      - name: Checking Out Develop
        uses: actions/checkout@v1
        with:
          fetch-depth: 0

    #Generates the hashes for the comparison between the origin branch and the upstream development branch
      - name: Derive appropriate SHAs for base and head for `nx affected` commands
        uses: nrwl/nx-set-shas@v2
        with:
          main-branch-name: 'develop'
    
    #Installs node.js
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
        run: npm install

    #cache the node modules
      - name: Cache dependencies for node
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}
          restore-keys: npm-

      - name: Install dependencies
        run: npm ci --ignore-scripts


    #Flutter Action needs java
      - name: Installing java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '8'

    #Including the Flutter action
      - name: Setup flutter
        uses: subosito/flutter-action@v1
        with: 
          channel: stable

    #Try to execute tests
      - name: Test affected
        if: inputs.test == 'affected' && inputs.testType == 'test'
        run: npx affected:test --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
        # run: npx nx run-many --target=test --all=true

    #Try to analyze code
    - name: Analyze affected
      if: inputs.test == 'affected' && inputs.testType == 'analyze'
      run: npx affected:analyze --base=${{ env.NX_BASE }} --head=${{ env.NX_HEAD }}
      # run: npx nx run-many --target=analyze --all=true
    #Try to build the app bundle
    - name:
      if: inputs.test == 'affected' && inputs.testType == 'build'
      run: npx nx run app:buildAppbundle

    #Test all which uses no cache
    - name: Test all
      if: input.tests == 'all'
      run: |
      npx nx run-many --target=test --all --skip-nx-cache --parallel
      npx nx run-many --target=analyze --all --skip-nx-cache --parallel
      npx nx run app:buildAppbundle

