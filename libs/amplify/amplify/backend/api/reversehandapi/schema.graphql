# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
# input AMPLIFY { globalAuthRule: AuthRule = { allow: public } } # FOR TESTING ONLY!

type Query {
  viewBids(ad_id: String!): [Bid]! @function(name: "viewBidsResolver-${env}")

  viewAdverts(user_id: String!): [Advert]!
    @function(name: "viewAdvertsResolver-${env}")

  viewJobs(locations: [String]!, type: String!): [Advert]!
    @function(name: "viewJobsResolver-${env}")

  viewUser(user_id: String!): User @function(name: "viewUserResolver-${env}")

  viewKey: String @function(name: "getGoogleApiKeyResolver-${env}")
}

type Mutation {
  shortListBid(ad_id: String!, bid_id: String!): Bid
    @function(name: "shortListBidResolver-${env}")

  acceptBid(ad_id: String!, sbid_id: String!): Bid
    @function(name: "acceptBidResolver-${env}")

  createAdvert(
    customer_id: String!
    ad_id: String!
    title: String!
    description: String
    location: String!
    type: String!
  ): Advert @function(name: "createAdvertResolver-${env}")

  placeBid(
    ad_id: String!
    bid_id: String!
    tradesman_id: String!
    name: String!
    price_lower: Int!
    price_upper: Int!
    quote: String
  ): Bid @function(name: "placeBidResolver-${env}") # quote is optional and represents a name of a file in a S3 bucket

  closeAdvert(ad_id: String!): Advert
    @function(name: "closeAdvertResolver-${env}")

  addUserToGroup(email: String!, group: String!): String
    @function(name: "addUserToGroupResolver-${env}")

  createUser(
    user_id: String!
    name: String!
    email: String!
    cellNo: String!
    location: LocationInput
    domains: [DomainInput]
    tradetypes: [String]
  ): User @function(name: "createUserResolver-${env}")

  editAdvert(
    ad_id: String!
    title: String!
    description: String
    type: String
    location: String
    date_closed: String
  ): Advert @function(name: "editAdvertResolver-${env}")

  deleteBid(ad_id: String!, bid_id: String!): Bid
    @function(name: "deleteBidResolver-${env}")

  editBid(
    ad_id: String!
    bid_id: String!
    quote: String
    price_lower: Int
    price_upper: Int
  ): Bid @function(name: "editBidResolver-${env}")

  editUserDetail(
    user_id: String!
    name: String
    domains: [String]
    city: String
    street: String
    streetNumber: String
    zipCode: String
    lat: String
    lng: String
  ): User @function(name: "editUserDetailResolver-${env}")

  removeDomain(user_id: String!, domain_pos: Int!): Int
    @function(name: "removeDomainResolver-${env}")
}

type User implements UniqueID {
  id: String!
  email: String!
  cellNo: String!
  name: String!
  location: Location!
  domains: [Domain!]
  tradetypes: [String!]
}

type Location {
  address: Address!
  coordinates: Coordinates!
}

type Domain {
  city: String!
  coordinates: Coordinates!
}

type Coordinates {
  lat: Float!
  lng: Float!
}

type Address {
  streetNumber: String!
  street: String!
  city: String!
  province: String!
  zipCode: String!
}

input DomainInput {
  city: String
  coordinates: CoordinatesInput
}

input LocationInput {
  address: AddressInput
  coordinates: CoordinatesInput
}

input AddressInput {
  streetNumber: String!
  street: String!
  city: String!
  province: String!
  zipCode: String!
}

input CoordinatesInput {
  lat: Float!
  lng: Float!
}

type Advert implements UniqueID {
  id: String!
  title: String!
  description: String
  type: String
  accepted_bid: String
  location: String # temporary
  date_created: String! # temporary
  date_closed: String # temporary
}

type Bid implements UniqueID {
  id: String!
  tradesman_id: String!
  name: String!
  price_lower: Int!
  price_upper: Int!
  quote: String # filename of quote stored in s3 bucket
  date_created: String!
  date_closed: String
}

type Notification implements UniqueID {
  id: String!
  user_id: String!
  notification: String # temporary
  date_created: String # temporary
  seen: Boolean!
}

<<<<<<< HEAD
<<<<<<< HEAD
=======

>>>>>>> 59e34f02f25803fd0c372ff99c2cf6a9db947f22
=======
>>>>>>> 1fd0b532bb83921f875ebf6ed75180e02c795ea4
type Review implements UniqueID {
  id: String!
  rating: Int
  comment: String
  user_id: String!
  advert_id: String!
  date_created: String!
}

# add more jobs here as we think of them
enum JobType {
  Plumbing
  Painting
}

interface UniqueID {
  id: String!
}
